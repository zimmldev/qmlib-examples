include(CMakeParseArguments)

function(add_plugin)
	set(oneValueArgs NAMESPACE PLUGIN CLASS_NAME)
	set(multiValueArgs LINK SOURCES QML_FILES SHADERS RESOURCES QML_DEPENDENCIES)
	cmake_parse_arguments(ADD_PLUGIN "${options}" "${oneValueArgs}"
						  "${multiValueArgs}" ${ARGN} )

	# Avoid trigger warning about autogenerated files
	cmake_policy(SET CMP0071 NEW)
	qt_policy(SET QTP0001 NEW)

	# Convert ADD_PLUGIN_PLUGIN to lowercase
	string(TOLOWER "${ADD_PLUGIN_PLUGIN}" ADD_PLUGIN_LOWERCASE)

	# Append "plugin" to the lowercase value
	set(ADD_PLUGIN_TARGET "${ADD_PLUGIN_LOWERCASE}plugin")

	set(CMAKE_DEBUG_POSTFIX "")
	set(CMAKE_INCLUDE_CURRENT_DIR ON)

	find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core)
	find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core)
	if (IOS)
		set(QMLIB_BUILD_SHARED_LIBS OFF PARENT_SCOPE)
	elseif(EMSCRIPTEN)
		set(QMLIB_BUILD_SHARED_LIBS OFF PARENT_SCOPE)
	else()
		if (NOT DEFINED QMLIB_BUILD_SHARED_LIBS)
			set(QMLIB_BUILD_SHARED_LIBS OFF PARENT_SCOPE)
		endif()
	endif()

	if (QMLIB_BUILD_SHARED_LIBS)
		set(module_type SHARED)
	else()
		set(module_type STATIC)

		foreach(dep ${ADD_PLUGIN_QML_DEPENDENCIES})
			string(TOLOWER ${dep} libname)

			set(pluginslink ${pluginslink} ${libname}plugin)
		endforeach()
	endif()

	if (ADD_PLUGIN_CLASS_NAME)
		qt_add_qml_module(
			${ADD_PLUGIN_TARGET}
			URI
				${ADD_PLUGIN_PLUGIN}
			PLUGIN_TARGET
				${ADD_PLUGIN_TARGET}
			${module_type}
			NO_PLUGIN_OPTIONAL
			NO_GENERATE_PLUGIN_SOURCE
			CLASS_NAME
				${ADD_PLUGIN_CLASS_NAME}
			VERSION
				1.0
			NAMESPACE
				${ADD_PLUGIN_NAMESPACE}
			OUTPUT_DIRECTORY
				${QML_IMPORT_PATH}/${ADD_PLUGIN_PLUGIN}
			SOURCES
				${ADD_PLUGIN_SOURCES}
			RESOURCES
				${ADD_PLUGIN_RESOURCES}
			QML_FILES
				${ADD_PLUGIN_QML_FILES}
			DEPENDENCIES
				${ADD_PLUGIN_QML_DEPENDENCIES}
			OUTPUT_TARGETS
				output_targets
		)
	else()
		qt_add_qml_module(
			${ADD_PLUGIN_TARGET}
			URI
				${ADD_PLUGIN_PLUGIN}
			${module_type}
			VERSION
				1.0
			NAMESPACE
				${ADD_PLUGIN_NAMESPACE}
			OUTPUT_DIRECTORY
				${QML_IMPORT_PATH}/${ADD_PLUGIN_PLUGIN}
			SOURCES
				${ADD_PLUGIN_SOURCES}
			RESOURCES
				${ADD_PLUGIN_RESOURCES}
			QML_FILES
				${ADD_PLUGIN_QML_FILES}
			DEPENDENCIES
				${ADD_PLUGIN_QML_DEPENDENCIES}
			OUTPUT_TARGETS
				output_targets
		)
	endif()

	if (ADD_PLUGIN_SHADERS)
		find_package(Qt6 COMPONENTS ShaderTools REQUIRED)

		qt_add_shaders(${ADD_PLUGIN_TARGET} ${ADD_PLUGIN_PLUGIN}
			FILES
				${ADD_PLUGIN_SHADERS}
			PREFIX
				"/${ADD_PLUGIN_PLUGIN}"
			OUTPUT_TARGETS
				shader_output_targets
			)

		foreach(output_target ${output_targets})
			add_dependencies(${ADD_PLUGIN_TARGET} ${output_target})
		endforeach()
	endif()

	target_link_libraries(${ADD_PLUGIN_TARGET} PUBLIC ${ADD_PLUGIN_LINK})

	qt_target_qml_sources(
		${ADD_PLUGIN_TARGET}
		RESOURCES
			${ADD_PLUGIN_RESOURCES}
		OUTPUT_TARGETS
			resources_output_targets
	)

	if (ADD_PLUGIN_NAMESPACE)
		add_library(${ADD_PLUGIN_NAMESPACE}::${ADD_PLUGIN_TARGET} ALIAS ${ADD_PLUGIN_TARGET})
	endif()

	include(GenerateExportHeader)
	generate_export_header(${ADD_PLUGIN_TARGET}
				EXPORT_FILE_NAME ${ADD_PLUGIN_TARGET}export.h)

	target_include_directories(${ADD_PLUGIN_TARGET}
		   PUBLIC
		   $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>  # This is for build time
		   $<INSTALL_INTERFACE:include/${ADD_PLUGIN_TARGET}>  # This is for install time
	)

	if (ADD_PLUGIN_CLASS_NAME)
		if (NOT QMLIB_BUILD_SHARED_LIBS)
			target_link_libraries(${ADD_PLUGIN_TARGET}
						INTERFACE
							${pluginslink}
			)
		endif()
	else()
		if (NOT QMLIB_BUILD_SHARED_LIBS)
			target_link_libraries(${ADD_PLUGIN_TARGET}
						PUBLIC
							${ADD_PLUGIN_TARGET}plugin
						)
		endif()

		set(extra_output_target
			${ADD_PLUGIN_TARGET}plugin
		)

		target_link_libraries(${ADD_PLUGIN_TARGET}
					INTERFACE
						${pluginslink}
		)
	endif()

	install(TARGETS
			${ADD_PLUGIN_TARGET}
			${output_targets}
			${shader_output_targets}
			${resources_output_targets}
			${extra_output_target}
		EXPORT QMLibTargets
		LIBRARY DESTINATION lib
		ARCHIVE DESTINATION arch
		RUNTIME DESTINATION bin
		INCLUDES DESTINATION include
	)

	if (QMLIB_BUILD_SHARED_LIBS)
		install(TARGETS
				${ADD_PLUGIN_TARGET}
				${output_targets}
				${shader_output_targets}
				${resources_output_targets}
				${extra_output_target}
			EXPORT QMLibTargets
			LIBRARY DESTINATION qml/${ADD_PLUGIN_PLUGIN}
		)

		install(FILES
			${CMAKE_BINARY_DIR}/bin/plugins/${ADD_PLUGIN_PLUGIN}/qmldir
			${CMAKE_BINARY_DIR}/bin/plugins/${ADD_PLUGIN_PLUGIN}/${ADD_PLUGIN_TARGET}.qmltypes
			DESTINATION qml/${ADD_PLUGIN_PLUGIN}
		)
	endif()

	install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		DESTINATION include
		FILES_MATCHING PATTERN "*.h"  # Only header files
	)
endfunction()
